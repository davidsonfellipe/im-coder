# E-commerce Customer Analytics
# Analyzing customer purchase behavior and product performance

library(dplyr)
library(ggplot2)
library(tidyr)

# Create sample e-commerce data
set.seed(123)
customer_data <- data.frame(
  customer_id = 1:500,
  purchase_amount = rnorm(500, mean = 150, sd = 75),
  items_purchased = sample(1:10, 500, replace = TRUE),
  days_since_last_purchase = sample(1:365, 500, replace = TRUE),
  customer_satisfaction = sample(1:5, 500, replace = TRUE, prob = c(0.1, 0.15, 0.2, 0.35, 0.2)),
  product_category = sample(c("Electronics", "Clothing", "Books", "Home", "Sports"), 500, replace = TRUE),
  payment_method = sample(c("Credit Card", "PayPal", "Bank Transfer", "Cash"), 500, replace = TRUE),
  is_returning_customer = sample(c(TRUE, FALSE), 500, replace = TRUE, prob = c(0.7, 0.3))
)

# Data cleaning and feature engineering
clean_data <- customer_data %>%
  filter(purchase_amount > 0, items_purchased > 0) %>%
  mutate(
    purchase_category = case_when(
      purchase_amount < 50 ~ "Small",
      purchase_amount < 150 ~ "Medium",
      TRUE ~ "Large"
    ),
    satisfaction_level = case_when(
      customer_satisfaction >= 4 ~ "High",
      customer_satisfaction >= 3 ~ "Medium",
      TRUE ~ "Low"
    ),
    customer_segment = case_when(
      is_returning_customer & purchase_amount > 200 ~ "VIP",
      is_returning_customer ~ "Regular",
      TRUE ~ "New"
    )
  )

# Product performance analysis
product_performance <- clean_data %>%
  group_by(product_category) %>%
  summarise(
    avg_purchase = mean(purchase_amount),
    total_sales = sum(purchase_amount),
    customer_count = n(),
    avg_satisfaction = mean(customer_satisfaction),
    .groups = 'drop'
  ) %>%
  arrange(desc(total_sales))

# Customer behavior analysis
customer_behavior <- clean_data %>%
  group_by(customer_segment, satisfaction_level) %>%
  summarise(
    avg_purchase_amount = mean(purchase_amount),
    avg_items = mean(items_purchased),
    count = n(),
    .groups = 'drop'
  )

# Payment method analysis
payment_analysis <- clean_data %>%
  group_by(payment_method) %>%
  summarise(
    avg_transaction = mean(purchase_amount),
    transaction_count = n(),
    total_volume = sum(purchase_amount),
    .groups = 'drop'
  )

# Create visualizations
sales_plot <- ggplot(clean_data, aes(x = product_category, y = purchase_amount, fill = customer_segment)) +
  geom_boxplot() +
  labs(
    title = "Purchase Amount by Product Category and Customer Segment",
    x = "Product Category",
    y = "Purchase Amount ($)",
    fill = "Customer Segment"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Customer satisfaction analysis
satisfaction_plot <- ggplot(clean_data, aes(x = satisfaction_level, fill = product_category)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Customer Satisfaction by Product Category",
    x = "Satisfaction Level",
    y = "Count",
    fill = "Product Category"
  ) +
  theme_minimal()

# Correlation analysis
correlation_matrix <- cor(clean_data[, c("purchase_amount", "items_purchased", "customer_satisfaction")])

# Predictive model for purchase amount
purchase_model <- lm(purchase_amount ~ items_purchased + customer_satisfaction + is_returning_customer, data = clean_data)
model_summary <- summary(purchase_model)

# Function to predict purchase amount
predict_purchase <- function(items, satisfaction, is_returning) {
  new_data <- data.frame(
    items_purchased = items,
    customer_satisfaction = satisfaction,
    is_returning_customer = is_returning
  )
  prediction <- predict(purchase_model, new_data)
  return(prediction)
}

# Example prediction
predicted_purchase <- predict_purchase(3, 4, TRUE)

# Print results
cat("Product Performance Summary:\n")
print(product_performance)

cat("\nCustomer Behavior Analysis:\n")
print(customer_behavior)

cat("\nPayment Method Analysis:\n")
print(payment_analysis)

cat("\nCorrelation between purchase amount and satisfaction:", correlation_matrix[1, 3], "\n")

cat("\nPredicted purchase amount for 3 items, satisfaction 4, returning customer:", predicted_purchase, "\n")

# Save plots
ggsave("sales_analysis.png", sales_plot, width = 10, height = 6)
ggsave("satisfaction_analysis.png", satisfaction_plot, width = 10, height = 6) 