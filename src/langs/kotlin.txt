import kotlinx.coroutines.*
import kotlinx.serialization.*
import kotlinx.serialization.json.*
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.net.URI
import java.time.Duration

@Serializable
data class User(
    val id: Int? = null,
    val name: String,
    val email: String,
    val isActive: Boolean = true
)

@Serializable
data class ApiResponse<T>(
    val data: T,
    val status: Int,
    val message: String
)

sealed class Result<out T> {
    data class Success<T>(val data: T) : Result<T>()
    data class Error(val message: String) : Result<Nothing>()
}

class UserService(private val baseUrl: String) {
    private val client = HttpClient.newBuilder()
        .connectTimeout(Duration.ofSeconds(10))
        .build()
    
    private val json = Json { ignoreUnknownKeys = true }

    suspend fun getUser(id: Int): Result<User> = withContext(Dispatchers.IO) {
        try {
            val request = HttpRequest.newBuilder()
                .uri(URI.create("$baseUrl/users/$id"))
                .header("Content-Type", "application/json")
                .GET()
                .build()

            val response = client.send(request, HttpResponse.BodyHandlers.ofString())
            
            if (response.statusCode() == 404) {
                return@withContext Result.Error("User not found")
            }
            
            val user = json.decodeFromString<User>(response.body())
            Result.Success(user)
        } catch (e: Exception) {
            Result.Error("Failed to fetch user: ${e.message}")
        }
    }

    suspend fun createUser(user: User): Result<User> = withContext(Dispatchers.IO) {
        try {
            val userJson = json.encodeToString(User.serializer(), user)
            
            val request = HttpRequest.newBuilder()
                .uri(URI.create("$baseUrl/users"))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(userJson))
                .build()

            val response = client.send(request, HttpResponse.BodyHandlers.ofString())
            
            if (response.statusCode() !in 200..299) {
                return@withContext Result.Error("Failed to create user")
            }
            
            val createdUser = json.decodeFromString<User>(response.body())
            Result.Success(createdUser)
        } catch (e: Exception) {
            Result.Error("Failed to create user: ${e.message}")
        }
    }

    suspend fun updateUser(id: Int, updates: Map<String, Any>): Result<User> = withContext(Dispatchers.IO) {
        try {
            val updatesJson = json.encodeToString(JsonObject.serializer(), JsonObject(updates.mapValues { JsonPrimitive(it.value.toString()) }))
            
            val request = HttpRequest.newBuilder()
                .uri(URI.create("$baseUrl/users/$id"))
                .header("Content-Type", "application/json")
                .PUT(HttpRequest.BodyPublishers.ofString(updatesJson))
                .build()

            val response = client.send(request, HttpResponse.BodyHandlers.ofString())
            
            val updatedUser = json.decodeFromString<User>(response.body())
            Result.Success(updatedUser)
        } catch (e: Exception) {
            Result.Error("Failed to update user: ${e.message}")
        }
    }
}

object UserValidator {
    fun validateEmail(email: String): Boolean {
        return email.contains("@") && email.contains(".")
    }
    
    fun validateUser(user: User): List<String> {
        val errors = mutableListOf<String>()
        
        if (user.name.trim().isEmpty()) {
            errors.add("Name cannot be empty")
        }
        
        if (!validateEmail(user.email)) {
            errors.add("Invalid email format")
        }
        
        return errors
    }
}

fun main() = runBlocking {
    val service = UserService("https://api.example.com")
    
    val newUser = User(
        name = "John Doe",
        email = "john@example.com"
    )
    
    val validationErrors = UserValidator.validateUser(newUser)
    if (validationErrors.isEmpty()) {
        when (val result = service.createUser(newUser)) {
            is Result.Success -> println("User created: ${result.data}")
            is Result.Error -> println("Error: ${result.message}")
        }
    } else {
        println("Validation errors: ${validationErrors.joinToString(", ")}")
    }
} 