package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type User struct {
	ID    int    `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type ApiResponse struct {
	Data    interface{} `json:"data"`
	Status  int         `json:"status"`
	Message string      `json:"message"`
}

type UserService struct {
	baseURL string
	client  *http.Client
}

func NewUserService(baseURL string) *UserService {
	return &UserService{
		baseURL: baseURL,
		client: &http.Client{
			Timeout: time.Second * 10,
		},
	}
}

func (s *UserService) GetUser(id int) (*User, error) {
	resp, err := s.client.Get(fmt.Sprintf("%s/users/%d", s.baseURL, id))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var user User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, err
	}

	return &user, nil
}

func (s *UserService) CreateUser(user *User) error {
	userData, err := json.Marshal(user)
	if err != nil {
		return err
	}

	resp, err := s.client.Post(
		fmt.Sprintf("%s/users", s.baseURL),
		"application/json",
		bytes.NewBuffer(userData),
	)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}

func validateEmail(email string) bool {
	// Simple email validation
	return len(email) > 0 && len(email) < 100
}

func main() {
	service := NewUserService("https://api.example.com")
	
	user := &User{
		Name:  "John Doe",
		Email: "john@example.com",
	}
	
	if err := service.CreateUser(user); err != nil {
		fmt.Printf("Error creating user: %v\n", err)
		return
	}
	
	fmt.Println("User created successfully")
}
